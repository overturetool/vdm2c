$CFormat.getGeneratedFileComment()
#set( $cname = $node.getName())
#set($header = $CFormat.getHeader($node))
#set( $vtable = $header.getVtable())
\#include "$String.format("%s.h",$cname)"
\#include <stdio.h>
\#include <string.h>

#[[
/* -------------------------------
 *
 * Memory management methods
 *
 --------------------------------- */
]]#
void ${cname}_free_fields(struct ${cname} *this)
{
#foreach( $field in $node.getFields() )
	#if( !($field.getFinal() == true || $field.getStatic() == true) )
	vdmFree(this->m_${cname}_$field.getName());
	#end
#end
}

static void ${cname}_free(struct ${cname} *this)
{
	${cname}_free_fields(this);
	free(this);
}

#[[
/* -------------------------------
 *
 * Member methods 
 *
 --------------------------------- */
 ]]#
#foreach( $method in $node.getMethods() )
#if( !$method.getIsConstructor() && !$CFormat.hasMethodTagHeaderOnly($method) )
$CFormat.format($method)
#end
#end

#[[
/* -------------------------------
 *
 * VTable
 *
 --------------------------------- */
 ]]#
/*  VTable for this class  */
$CFormat.format($CFormat.getHeader($node).getVtable().getVTableDeclarations())

/*  Overload VTables  */
#foreach( $field in $CFormat.getHeader($node).getVtable().getOverrideVTableDeclarations() )
$CFormat.format($field)
#end

#[[
/* -------------------------------
 *
 * Internal memory constructor
 *
 --------------------------------- */
 ]]#
 
${cname}CLASS ${cname}_Constructor(${cname}CLASS this_ptr)
{

	if(this_ptr==NULL)
	{
		this_ptr = (${cname}CLASS) malloc(sizeof(struct ${cname}));
	}

	if(this_ptr!=NULL)
	{
	
	#set( $cname = $node.getName())
	#foreach( $super in $CFormat.getHeader($node).getFlattenedSupers() )
	
		/*  init base $super.getName()  */
	#set( $sname = $super.getName())
	$String.format("%s_Constructor((%sCLASS)CLASS_CAST(this_ptr,%s,%s));",$sname,$sname,$cname,$sname)

		#if($CFormat.getHeader($node).getVtable().hasOverride($sname))
			#set($tn = $vtable.getOverrideStaticTableName($sname))
			if(! ${tn}[0].pFunc)
			{
				/*  obtain original $sname VTable  */
				/*  This will require rework for multiple inheritance, specifically the "... [0].getVtable..."  */
				memcpy( $tn, this_ptr->_${sname}_pVTable, sizeof( struct VTable) * $CFormat.getHeader($node).getFlattenedSupers()[0].getVtable().getTable().size());
				
				/*  install overrides  */
				#foreach($entry in $vtable.getOverrides($sname).entrySet())
					${tn}[$entry.getKey()].pFunc = (VirtualFunctionPointer)$entry.getValue(); /*  override  */
					
				#end
			}
			this_ptr->_${sname}_pVTable = $tn;
		#end
		
	#end
	
		/*  $cname init  */
		this_ptr->_${cname}_id = CLASS_ID_${cname}_ID;
		this_ptr->_${cname}_pVTable=VTableArrayFor${cname};

	#foreach( $field in $node.getFields() )
		#if( !($field.getFinal() == true || $field.getStatic() == true) )
	this_ptr->m_${cname}_$field.getName()=#if($CFormat.isNull($field.getInitial())) NULL #else $CFormat.format($field.getInitial())#end;
		#end
	#end
}

	return this_ptr;
}

/*  Method for creating new "class"  */
static TVP new()
{
	${cname}CLASS ptr=${cname}_Constructor(NULL);

	return newTypeValue($CFormat.getVdmType($node), (TypedValueType)
			{	.ptr=newClassValue(ptr->_${cname}_id, (freeVdmClassFunction)&${cname}_free, ptr)});
}


#[[
/* -------------------------------
 *
 * Public class constructors
 *
 --------------------------------- */ 
 ]]#

#foreach( $method in $node.getMethods() )
#if($method.getIsConstructor())
  #if($CFormat.isDefaultCtor($method) && $CFormat.isRec($node))
  #ifdef ASN1SCC_MAPPING
  $CFormat.format($method)
  #endif
  #else
  $CFormat.format($method)
#end
#end
#end

#[[
/* -------------------------------
 *
 * Global class fields
 *
 --------------------------------- */
 ]]#
/*  initialize globals - this is done last since they are declared in the header but uses init functions which are printet in any order  */
#foreach($field in $node.getFields())
	#if($field.getFinal() || $field.getStatic())
TVP $field.getName() = #if($CFormat.isNull($field.getInitial())) NULL #else $CFormat.format($field.getInitial())#end;
	#end
#end


