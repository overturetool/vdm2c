
class Tree
end Tree

class BinarySearchTree is subclass of Tree
end BinarySearchTree

class Queue
end Queue

class AVLTree is subclass of Tree
end AVLTree

class BalancedBST is subclass of BinarySearchTree
end BalancedBST

class ExpressionOOChecks
values

t = new Tree();
b = new BinarySearchTree();
q = new Queue();
a = new AVLTree();
bb = new BalancedBST();
bMark = new BinarySearchTree();

functions

--
-- isofbaseclass
--
public isofbaseclass_First :  () -> bool
isofbaseclass_First () == isofbaseclass(Tree, t);

public isofbaseclass_Second :  () -> bool
isofbaseclass_Second () == not isofbaseclass(BinarySearchTree, b);

public isofbaseclass_Third :  () -> bool
isofbaseclass_Third () == isofbaseclass(Queue, q);

public isofbaseclass_Fourth :  () -> bool
isofbaseclass_Fourth () == isofbaseclass(Tree, b);

public isofbaseclass_Fifth :  () -> bool
isofbaseclass_Fifth () == not isofbaseclass(Tree, q);

--
-- isofclass
--
--public isofclass_First :  () -> bool
--isofclass_First () == isofclass(Tree,t);
--
--public isofclass_Second :  () -> bool
--isofclass_Second () == isofclass(Tree,b);
--
--public isofclass_Third :  () -> bool
--isofclass_Third () == not isofclass(Tree,q);
--
--public isofclass_Fourth :  () -> bool
--isofclass_Fourth () == isofclass(Queue,q);
--
--public isofclass_Fifth :  () -> bool
--isofclass_Fifth () == not isofclass(BinarySearchTree,t);
-- 
--public isofclass_Sixth :  () -> bool
--isofclass_Sixth () == isofclass(BinarySearchTree,b); 

--
-- samebaseclass
--
public samebaseclass_First :  () -> bool
samebaseclass_First () == samebaseclass(a,b);

public samebaseclass_Second :  () -> bool
samebaseclass_Second () == samebaseclass(a,bb);

public samebaseclass_Third :  () -> bool
samebaseclass_Third () == samebaseclass(b,bb);

public samebaseclass_Fourth :  () -> bool
samebaseclass_Fourth () == samebaseclass(t,bb);

public samebaseclass_Fifth :  () -> bool
samebaseclass_Fifth () == not samebaseclass(q,a);

--
-- sameclass
--
--public sameclass_First :  () -> bool
--sameclass_First () == not sameclass(b,t);
--
--public sameclass_Second :  () -> bool
--sameclass_Second () == sameclass(b,bMark) ;
--
--public sameclass_Third :  () -> bool
--sameclass_Third () == not sameclass(q,t);


end ExpressionOOChecks