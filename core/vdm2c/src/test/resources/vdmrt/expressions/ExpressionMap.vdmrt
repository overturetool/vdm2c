class ExpressionMap

functions

public mapDom :  () -> bool
mapDom () == dom {1 |-> 2, 3 |-> 4} = {3,1};

public mapRng :  () -> bool
mapRng () == rng {1 |-> 2, 3 |-> 4} = {4,2};

public mapAccessSimple : () -> bool
mapAccessSimple () ==
let m = {1 |-> 2, 3 |-> 4},
    v = m(3)
in
  v = 4;

public mapEq :  () -> bool
mapEq () ==  {1 |-> 2, 3 |-> 4} = {3 |-> 4, 1 |-> 2};

public mapNeq :  () -> bool
mapNeq () ==  {1 |-> 2, 3 |-> 4} <> {30 |-> 40, 10 |-> 20};

public mapInv :  () -> bool
mapInv () == inverse {1 |-> 2, 3 |-> 4} = {4 |-> 3, 2 |-> 1};

public mapUnion :  () -> bool
mapUnion () == {1 |-> 2} munion {3 |-> 4} = {3 |-> 4, 1 |-> 2};

public mapOverride : () -> bool
mapOverride () == {1 |-> 2, 3 |-> 5} ++ {10 |-> 10, 3 |-> 15} = {1 |-> 2, 10 |-> 10, 3 |-> 15};

public mapDistMerge :  () -> bool
mapDistMerge () == merge {{1 |-> 2},{3 |-> 4}, {4 |-> 5}} = {1 |-> 2, 3 |-> 4, 4 |-> 5};

public mapRestrictTo :  () -> bool
mapRestrictTo () == {2} <: {1 |-> 2, 2 |-> 3} = {2 |-> 3};

public mapRestrictBy :  () -> bool
mapRestrictBy () == {2} <-: {1 |-> 2, 2 |-> 3} = {1 |-> 2};

public mapRestrictRngTo :  () -> bool
mapRestrictRngTo () == {1 |-> 2, 2 |-> 3} :> {3} = {2 |-> 3};

public mapRestrictRngBy :  () -> bool
mapRestrictRngBy () == {1 |-> 2, 2 |-> 3} :-> {3} = {1 |-> 2};

public mapIteration : () -> bool
mapIteration () == {1 |-> 2, 2 |-> 1, 3 |-> 4, 4 |-> 3} ** 2 = {1 |-> 1, 2 |-> 2, 3 |-> 3, 4 |-> 4};

public mapComp : () -> bool
mapComp () == ({2 |-> 20, 4 |-> 40, 6 |-> 60} comp {1 |-> 2, 3 |-> 4, 5 |-> 6}) = {1 |-> 20, 3 |-> 40, 5 |-> 60};

end ExpressionMap