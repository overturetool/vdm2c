class A is subclass of World

operations

public getTemp : () ==> int
getTemp () == return 2;

public getEmp : int ==> ()
getEmp (o) == skip;

public setTemp : int ==> int
setTemp (a) == return a;

public TestFunc: int * int ==> int
TestFunc(id,b) ==
(

dcl i : int;

getEmp(i);

--if(id=2 or id=1) then return sendUART(6,7);

--if(id=3) then return 1;

return 4;
);

--public sendUART: int * int ==> int
--sendUART(id,b) == return 12;

end A

class B

instance variables
a_loc : A;
a_rem : A;

operations

public B : A * A ==> B
B (a1,a2) == (

a_loc := a1; -- Local object
a_rem := a2; -- Remote object

);

public callLoc : () ==> int
callLoc () == return a_loc.getTemp(); -- CALLFUNC(...)

public callRem : () ==> int
callRem() == return a_rem.getTemp(); -- DISTCALL(...)

public aFun : () ==> int
aFun() == return a_rem.setTemp(4); -- DISTCALL(...)

end B

system D
instance variables
-- Architecture definition
/*
Computing units:
	Priority: <FP> - Fixed priority
	          <PP> - Priority?

Speed is giving in Hz - Cycles per second
*/

	public static a1 : A := new A();
	public static a2 : A := new A();
	public static b : B := new B(a1,a2);

  cpu1 : CPU := new CPU(<FP>, 22E6);
  cpu2 : CPU := new CPU(<FP>, 22E6);
/*
Communication bus:
 	Modes: <CSMACD> - ?
*/
  bus : BUS := new BUS(<CSMACD>, 72E3,{cpu1,cpu2});
-- TODO Define deployable objects as static instance variables
operations

public D : () ==> D
D () == 
(-- TODO Deploy deployable object to cpu's

  cpu1.deploy(a1);
	cpu1.deploy(b);

  cpu2.deploy(a2);
);
end D

class World

operations

-- The entry function, running on CPU1 in example
public Run : () ==> int
Run () == return D`b.callLoc() + D`b.callRem();

end World