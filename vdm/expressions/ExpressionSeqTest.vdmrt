class ExpressionSeqTest is subclass of TestCase
operations

public testseqHd : () ==>()
testseqHd()== assertTrue(seqHd());

public testseqTl : () ==>()
testseqTl()== assertTrue(seqTl());

public testseqLen : () ==>()
testseqLen()== assertTrue(seqLen());

public testseqElems : () ==>()
testseqElems()== assertTrue(seqElems());

public testseqInds : () ==>()
testseqInds()== assertTrue(seqInds());

public testseqConc : () ==>()
testseqConc()== assertTrue(seqConc());

public testseqReverse : () ==>()
testseqReverse()== assertTrue(seqReverse());

public testseqIndex : () ==>()
testseqIndex()== assertTrue(seqIndex());


public testseqEqual : () ==>()
testseqEqual()== assertTrue(seqEqual());


public testseqInEqual : () ==>()
testseqInEqual()== assertTrue(seqInEqual());


functions


seqHd: () -> bool
seqHd()== hd [1,2] = 1;

seqTl: () -> bool
seqTl()== tl [1,2] = [2];

seqLen: () -> bool
seqLen()== len [1,2] = 2;


seqElems: () -> bool
seqElems()== elems [1,2] = {1,2};

seqInds: () -> bool
seqInds()== inds [1,2] = {1,2};

seqConc: () -> bool
seqConc()==  [1]^[2] = [1,2];


seqReverse: () -> bool
seqReverse()== reverse [1,2] = [2,1];

seqIndex: () -> bool
seqIndex()== [1,2](1)=1;

seqEqual: () -> bool
seqEqual()== [1,2] = [1,2];

seqInEqual: () -> bool
seqInEqual()== [1] <> [2];

end ExpressionSeqTest