class Expression
functions



--pattern identifier
--| match value
--| set enum pattern
--| set union pattern
--| seq enum pattern
--| seq conc pattern
--| map enumeration pattern
--| map muinon pattern
--| tuple pattern
--| record pattern
--| object pattern


protected letIdentifierExp: () -> bool
letIdentifierExp()== let a = true in a;

protected letIdentifierDontExp: () -> bool
letIdentifierDontExp()== let - = true in true;

protected letPatternMatch1: ()-> bool
letPatternMatch1()== let 1 = 1 in true;

protected letPatternMatch2: ()-> bool
letPatternMatch2()== let mk_(1,a) = mk_(1,2) in a=2;


--letPatternExp: () -> bool
--letPatternExp()== let a,b : in set{1} true in true;

-- let with tuble is pattern match

-- let with value on left side of assignment is filter
protected letFilter1Exp: () -> bool
letFilter1Exp()==
let b = 2 in
 let 1 = b in true;
 
protected letPatternMatch3: ()-> bool
letPatternMatch3()== let mk_(a,2) = mk_(1,2) in true;


protected ifExp : ()-> bool
ifExp()== 
	if true or true 
	then 
		true or false 
	else 
		true;
end Expression