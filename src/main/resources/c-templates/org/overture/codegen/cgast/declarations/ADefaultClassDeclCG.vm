// The template for class
#set( $cname = $node.getName())
\#include "$String.format("%s.h",$cname)"
\#include <stdio.h>



// Memory management methods
void ${cname}_free_fields(struct ${cname} *this)
{
	//free class struct
#foreach( $field in $node.getFields() )
	vdmFree(this->m_${cname}_$field.getName());
#end
}

static void ${cname}_free(struct ${cname} *this)
{
	--this->_${cname}_refs;
	if (this->_${cname}_refs < 1)
	{
		${cname}_free_fields(this);
		free(this);
	}
}

// The methods but not constructors
#foreach( $method in $node.getMethods() )
#if(!$method.getIsConstructor())
$CFormat.format($method)
#end
#end

// The table
static struct VTable VTableArrayFor${cname} [] =
{
#foreach( $method in $node.getMethods() )
#if(!$method.getIsConstructor()){ 0, 0, (VirtualFunctionPointer) $method.getName() },
#end
#end
};

// The internal memory constructor
${cname}CLASS ${cname}_Constructor(${cname}CLASS this_ptr)
{

	if(this_ptr==NULL)
	{
		this_ptr = (${cname}CLASS) malloc(sizeof(struct ${cname}));
	}

	if(this_ptr!=NULL)
	{
	
	#set( $cname = $node.getName())
	#foreach( $super in $CFormat.getHeader($node).getFlattenedSupers() )
	
		//init base $super.getName()
	#set( $sname = $super.getName())
	$String.format("%s_Constructor((%sCLASS)CLASS_CAST(this_ptr,%s,%s));",$sname,$sname,$cname,$sname);

		//TODO vtable overload for $sname goes here.
	#end
	
		// $cname init
		this_ptr->_${cname}_id = CLASS_ID_${cname}_ID;
		this_ptr->_${cname}_refs = 0;
		this_ptr->_${cname}_pVTable=VTableArrayFor${cname};

	#foreach( $field in $node.getFields() )
	this_ptr->m_${cname}_$field.getName()=#if($CFormat.isNull($field.getInitial())) NULL #else $CFormat.format($field.getInitial())#end;
	#end
}

	return this_ptr;
}

// Method for creating new "class"
static TVP new()
{
	${cname}CLASS ptr=${cname}_Constructor(NULL);

	return newTypeValue(VDM_CLASS, (TypedValueType)
			{	.ptr=newClassValue(ptr->_${cname}_id, &ptr->_${cname}_refs, (freeVdmClassFunction)&${cname}_free, ptr)});
}

//Drepecated only there to support existing tests
const struct ${cname}Class ${cname} =
{ ._new = &new };



// The VDM accessible constructor methods
#foreach( $method in $node.getMethods() )
#if($method.getIsConstructor())
$CFormat.format($method)
#end
#end

