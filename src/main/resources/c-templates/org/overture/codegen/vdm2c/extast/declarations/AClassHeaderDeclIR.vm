// The template for class header
#set( $cname = $node.getName())
#set( $cstructname = $String.format("%sCLASS",$cname))
#set( $cdefname = $String.format("CLASSES_%s_H_", $cname ) )
#ifndef $cdefname
\#define $cdefname

\#define VDM_CG

\#include "Vdm.h"
#foreach( $super in $node.getFlattenedSupers() )
\#include "$String.format("%s.h",$super.getName().toString())"
#end

//include types used in the class
#foreach( $typeName in $node.getIncludes() )
\#include "$String.format("%s.h",$typeName)"
#end

//values / global const
#foreach( $val in $node.getValues() )
extern TVP $val.getName();
#end

\#define $String.format("CLASS_ID_%s_ID %d",$cname, $CFormat.getClassId($cname))

\#define $String.format("%s struct %s*",$cstructname,$cname)

// The vtable ids
#foreach( $entry in $node.getVtable().getTable() )
\#define $String.format("CLASS_%s_%s %d",$cname,$entry.getKey(), $node.getVtable().getTable().indexOf($entry))
#end

struct $cname
{
#foreach( $super in $node.getFlattenedSupers() )
	$CFormat.format($super.getState())
#end
	$CFormat.format($node.getState())
};

/* public access functions*/
#foreach( $method in $node.getOriginalDef().getMethods() )
#if($method.getIsConstructor()|| $CFormat.isPublic($method)) $CFormat.format($method.getMethodType().getResult()) $method.getName()($CFormat.format($method.getFormalParams()).replace("this","this_"));
#end
#end

/* internal use only*/
void ${cname}_free_fields(${cstructname});
$cstructname ${cname}_Constructor(${cstructname});

extern const struct ${cname}Class
{
	TVP (*_new)();
} $cname;

#endif /* $cdefname */