// The template for class header

#ifndef CLASSES_$CFormat.getClassHeaderName($node)_H_
\#define CLASSES_$CFormat.getClassHeaderName($node)_H_

\#define VDM_CG

\#include "Globals.h"
\#include "lib/TypedValue.h"
\#include "lib/VdmClass.h"
\#include "lib/VdmBasicTypes.h"
\#include "lib/VdmSet.h"
\#include "lib/VdmSeq.h"
#foreach( $super in $node.getFlattenedSupers() )
\#include "$String.format("%s.h",$super.getName().toString())"
#end

//include types used in the class
#foreach( $typeName in $node.getIncludes() )
\#include "$String.format("%s.h",$typeName)"
#end

\#define CLASS_ID_$CFormat.getClassHeaderName($node)_ID $CFormat.getClassId($CFormat.getClassHeaderName($node))

\#define $CFormat.getClassHeaderName($node)CLASS struct $CFormat.getClassHeaderName($node)*


// The vtable ids

#foreach( $method in $node.getMethods() )
#if(!$method.getIsConstructor())\#define CLASS_$CFormat.getClassHeaderName($node)_$method.getName() $CFormat.getNumber()
#end
#end

struct $CFormat.getClassHeaderName($node)
{
#foreach( $super in $node.getFlattenedSupers() )
	$CFormat.format($super.getState())
#end
	$CFormat.format($node.getState())
};

/* public access functions*/
#foreach( $method in $node.getMethods() )
#if($method.getIsConstructor()|| $method.getIsStatic()) $CFormat.format($method.getMethodType().getResult()) $method.getName()($CFormat.format($method.getFormalParams()));
#end
#end

/* internal use only*/
void $CFormat.getClassHeaderName($node)_free_fields($CFormat.getClassHeaderName($node)CLASS);
$CFormat.getClassHeaderName($node)CLASS $CFormat.getClassHeaderName($node)_Constructor($CFormat.getClassHeaderName($node)CLASS);

extern const struct $CFormat.getClassHeaderName($node)Class
{
	TVP (*_new)();
} $CFormat.getClassHeaderName($node);

#endif /* CLASSES_$CFormat.getClassHeaderName($node)_H_ */