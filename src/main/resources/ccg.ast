Packages

base org.overture.cgc.extast.node;
analysis org.overture.cgc.extast.analysis;

Tokens

 // Wraps a string type so it can be used as a field type
  eString ='java:org.overture.codegen.vdm2c.ast.CGenClonableString';
eVtables ='java:org.overture.codegen.vdm2c.ast.Vtables';
Abstract Syntax Tree

CG = #decl
   | #stm
   | #exp
    ;
    
    
#exp {-> package='org.overture.codegen.vdm2c.extast.expressions'}
    =	{macroApply} [root]:CG.#exp [args]:CG.#exp*
    |	{ptrDeref} [root]:CG.#exp [target]:CG.#exp
    |	{c} [exp]:CG.#exp
    |	{arrayIndex} [root]:CG.#exp [index]:CG.#exp
    |	{stm} [stm]:CG.#stm
    |	{paren} [exp]:CG.#exp
    |	{plusplus} [exp]:CG.#exp
	;



#stm {-> package='org.overture.codegen.vdm2c.extast.statements'}
	= {localVariableDeclaration} [decleration]:CG.#decl.var;
	
	


#decl {-> package='org.overture.codegen.vdm2c.extast.declarations'}
	= 
       {classHeader}
    	[name]:java_String
    	(originalDef):CG.#decl.#Class
		(flattenedSupers):CG.#decl.classHeader*
		[state]:CG.#decl.classState
    	[methods]:CG.#decl.method*
    	[includes]:eString*
    	[vtable]:eVtables
    | {classState} [fields]:CG.#decl.field* //not sure why it cannot compile as a graph field
    | {array} [static]:java_Boolean [type]:CG.#type [name]:java_String [size]:java_Integer [initial]:struct*
       ;
       

struct  {-> package='org.overture.codegen.vdm2c.extast.declarations'}
	= {anonymous} [exp]:CG.#exp*	
	;
       
