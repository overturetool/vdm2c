// The template for class header

#ifndef CLASSES_A_H_
\#define CLASSES_A_H_

\#include "Globals.h"
\#include "lib/TypedValue.h"
\#include "lib/VdmClass.h"
\#include "lib/VdmBasicTypes.h"


\#define $XFormat.getClassHeaderName($node)CLASS struct $XFormat.getClassHeaderName($node)*


// The table

#foreach( $method in $node.getMethods() )
#if(!$method.getIsConstructor())\#define CLASS_$XFormat.getClassHeaderName($node)_$method.getName() $XFormat.getNumber();
#end
#end

struct $XFormat.getClassHeaderName($node)
{
	VDM_CLASS_BASE_DEFINITIONS($XFormat.getClassHeaderName($node));
	/*vtable
	 * calc
	 * sum
	 * */
	 
	#foreach( $field in $node.getFields() )
VDM_CLASS_FIELD_DEFINITION($XFormat.getClassHeaderName($node),$field.getName());
	#end

};


void $XFormat.getClassHeaderName($node)_free_fields($XFormat.getClassHeaderName($node)CLASS);
$XFormat.getClassHeaderName($node)CLASS $XFormat.getClassHeaderName($node)_Constructor($XFormat.getClassHeaderName($node)CLASS);

extern const struct $XFormat.getClassHeaderName($node)Class
{
	TVP (*_new)();
} $XFormat.getClassHeaderName($node);

#endif /* CLASSES_$XFormat.getClassHeaderName($node)_H_ */
