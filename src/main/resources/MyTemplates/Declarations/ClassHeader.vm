// The template for class header

#ifndef CLASSES_A_H_
\#define CLASSES_A_H_

\#include "Globals.h"
\#include "lib/TypedValue.h"
\#include "lib/VdmClass.h"
\#include "lib/VdmBasicTypes.h"
\#include "lib/VdmSet.h"
\#include "lib/VdmSeq.h"

\#define CLASS_ID_$CFormat.getClassName($node)_ID $CFormat.getClassId($CFormat.getClassName($node))

\#define $CFormat.getClassName($node)CLASS struct $CFormat.getClassName($node)*


// The table

#foreach( $method in $node.getMethods() )
#if(!$method.getIsConstructor())\#define CLASS_$CFormat.getClassName($node)_$method.getName() $CFormat.getNumber();
#end
#end

struct $CFormat.getClassName($node)
{
	VDM_CLASS_BASE_DEFINITIONS($CFormat.getClassName($node));
	/*vtable
	 * calc
	 * sum
	 * */
	 
	#foreach( $field in $node.getFields() )
VDM_CLASS_FIELD_DEFINITION($CFormat.getClassName($node),$field.getName());
	#end

};


void $CFormat.getClassName($node)_free_fields($CFormat.getClassName($node)CLASS);
$CFormat.getClassName($node)CLASS $CFormat.getClassName($node)_Constructor($CFormat.getClassName($node)CLASS);

extern const struct $CFormat.getClassName($node)Class
{
	TVP (*_new)();
} $CFormat.getClassName($node);

#endif /* CLASSES_$CFormat.getClassName($node)_H_ */